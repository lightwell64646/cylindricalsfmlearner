#!/usr/bin/env python
from __future__ import division

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('path',help='path to model file')
parser.add_argument('--width',type=int,default=2048,help='output panorama width')
parser.add_argument('--IPD',type=float,default=0.02,help='interpupillary distance (IPD)')
args = parser.parse_args()

import os
import sys
import numpy as np
import cv2
from tqdm import trange

import trimesh
import pyrender

def normalize(vec):
    return vec / np.linalg.norm(vec)

def lookAt(eye,target,up):
    zaxis = normalize(eye - target)
    xaxis = normalize(np.cross(up,zaxis))
    yaxis = normalize(np.cross(zaxis,xaxis))
 
    M = np.eye(4)
    M[0,0:3] = xaxis
    M[1,0:3] = yaxis
    M[2,0:3] = zaxis
    M[0,3] = -eye.dot(xaxis)
    M[1,3] = -eye.dot(yaxis)
    M[2,3] = -eye.dot(zaxis)
 
    return np.linalg.inv(M)

def GetRayForODSCamera(x,y,left_eye,IPD):
    theta = x * 2 * np.pi - np.pi
    phi = np.pi / 2 - y * np.pi
    if left_eye:
        scale = -IPD / 2
    else:
        scale = IPD / 2
    ray_origin = np.array([np.cos(theta), 0, np.sin(theta)]) * scale
    ray_direction = np.array([np.sin(theta) * np.cos(phi), np.sin(phi), -np.cos(theta) * np.cos(phi)])
    return ray_origin, ray_direction

def ProjectToODS(perspective_image):
    height = perspective_image.shape[0]
    equirect_image = np.zeros((height,1,3),dtype='uint8')
    for equirect_y in range(height):
        phi = (equirect_y+0.5) / height * np.pi / 2 - np.pi / 4
        perspective_y = (np.tan(phi) * 0.5 + 0.5) * height
        color = cv2.getRectSubPix(perspective_image,(1,1),(0.5,perspective_y))[0][0]
        equirect_image[equirect_y,0] = color
    return equirect_image

def RenderODSImage2(mesh, left_eye, IPD, output_width):
    # calculate output height
    output_height = output_width // 2

    # Y <-> Z
    # create scene with mesh
    mesh_pose = np.array([
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
    ])
    scene = pyrender.Scene(bg_color=np.zeros(4))
    scene.add(mesh,pose=mesh_pose)
    
    # create camera for half a column 
    yfov = np.pi / 2
    aspect = 2 / output_height
    camera = pyrender.PerspectiveCamera(yfov=yfov)#,aspectRatio=aspect,znear=0.001)
    cam = scene.add(camera)
    
    # create renderer
    r = pyrender.OffscreenRenderer(1, output_height/2)

    # create output image
    ods_image = np.zeros([output_height,output_width,3],dtype='uint8')
    
    up = np.array([0,-1,0])

    for column in trange(output_width):
        x = (column+0.5)/output_width

        ray_origin, ray_direction = GetRayForODSCamera(x, 0.25, left_eye, IPD)
        camera_pose = lookAt(ray_origin, ray_origin+ray_direction,up)
        scene.set_pose(cam,pose=camera_pose)
        color, depth = r.render(scene,flags=pyrender.constants.RenderFlags.FLAT)
        ods_image[output_height//2:,column] = ProjectToODS(color)[:,0]

        ray_origin, ray_direction = GetRayForODSCamera(x, 0.75, left_eye, IPD)
        camera_pose = lookAt(ray_origin, ray_origin+ray_direction,up)
        scene.set_pose(cam,pose=camera_pose)
        color, depth = r.render(scene,flags=pyrender.constants.RenderFlags.FLAT)
        ods_image[:output_height//2,column] = ProjectToODS(color)[:,0]
        
    return ods_image

def RenderODSImage(mesh, left_eye, IPD, output_width, fov):
    # calculate output height
    output_height = output_width // 2

    # Y <-> Z
    # create scene with mesh
    mesh_pose = np.array([
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
    ])
    scene = pyrender.Scene()#bg_color=np.zeros(4))
    scene.add(mesh,pose=mesh_pose)
    
    # create camera 
    camera = pyrender.PerspectiveCamera(yfov=fov*np.pi/180)
    cam = scene.add(camera)
    
    # create renderer
    r = pyrender.OffscreenRenderer(1, output_height)

    # create output image
    ods_image = np.zeros([output_height,output_width,3],dtype='uint8')
    
    up = np.array([0,-1,0])

    for column in trange(output_width):
        x = (column+0.5)/output_width

        ray_origin, ray_direction = GetRayForODSCamera(x, 0.5, left_eye, IPD)
        camera_pose = lookAt(ray_origin, ray_origin+ray_direction,up)
        scene.set_pose(cam,pose=camera_pose)
        color, depth = r.render(scene,flags=pyrender.constants.RenderFlags.FLAT)
        ods_image[:,column] = color[:,0]
    return ods_image

def RenderPerspective(mesh, left_eye, IPD, output_width, column):
    scene = pyrender.Scene()
    scene.add(mesh)
    up = np.array([0,-1,0])
    ray_origin, ray_direction = GetRayForODSCamera((column+0.5)/output_width, 0.25, True, IPD)
    camera_pose = lookAt(ray_origin, ray_origin+ray_direction,up)
    camera = pyrender.PerspectiveCamera(yfov=np.pi / 2.0)
    scene.add(camera,pose=camera_pose)
    r = pyrender.OffscreenRenderer(400, 400)
    color, depth = r.render(scene,flags=pyrender.constants.RenderFlags.FLAT)
    return color

T = trimesh.load(args.path)
mesh = pyrender.Mesh.from_trimesh(T)
left_image = RenderODSImage2(mesh, True, args.IPD, args.width)
cv2.imwrite('sphericalL.png',left_image[:,::-1,::-1])
right_image = RenderODSImage2(mesh, False, args.IPD, args.width)
cv2.imwrite('sphericalR.png',right_image[:,::-1,::-1])

